# GraphQL schema for Canvas integration. V.1.0.

# Reusable Types

# type StringWrapped @query(read: false, aggregate: false) {
#   content: String
# }
# type FloatWrapped @query(read: false, aggregate: false) {
#   content: Float
# }

# union FloatOrString = StringWrapped | FloatWrapped

scalar PercentType

type PositionDTO @query(read: false, aggregate: false) {
  x: Float!
  y: Float!
}

# Common Mixins for Metadata, Position, and Flow Relationships
interface Metadata @query(read: false, aggregate: false) {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
}

interface Position @query(read: false, aggregate: false) {
  position: PositionDTO
}

interface HasInput @query(read: false, aggregate: false) {
  inputs: [String!]!
}

interface HasOutput @query(read: false, aggregate: false) {
  outputs: [String!]!
}

# Abstract Classes
interface Equipment implements Metadata & Position {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
}

interface Process implements Metadata & Position & HasInput & HasOutput {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  inputs: [String!]!
  outputs: [String!]!
}

interface Facility implements Equipment & Metadata & Position {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
}

interface MeasurementDevice implements Equipment & Metadata & Position {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
}

# Specific Classes with Attributes
type StorageTank implements Facility & Equipment & Metadata & Position {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  capacity: String
  contents: String
}

type Separator implements Process & Metadata & Position & HasInput & HasOutput {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  inputs: [String!]!
  outputs: [String!]!
  pressure: String
  temperature: String
  separation_efficiency: PercentType
}

type GasWell implements Equipment & Metadata & Position {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  pressure: String
  flow_rate: String
  depth: String
}

type Compressor implements Equipment & Metadata & Position & HasInput & HasOutput {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  inlet_pressure: String
  outlet_pressure: String
  power_consumption: String
  inputs: [String!]!
  outputs: [String!]!
}

type GasProcessingPlant implements Facility & Metadata & Position & Equipment & HasInput & HasOutput {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  throughput_capacity: String
  ngl_recovery_rate: PercentType
  inputs: [String!]!
  outputs: [String!]!
}

type NGLFractionationUnit implements Process & Metadata & Position & HasInput & HasOutput {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO!
  inputs: [String!]!
  outputs: [String!]!
  feed_rate: String
  ethane_recovery_rate: PercentType
  propane_recovery_rate: PercentType
  reboiler_duty: String
}

type Sensor implements MeasurementDevice & Equipment & Metadata & Position {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  sensor_type: String
  reading: Float
  measurement_unit: String
  accuracy: PercentType
}

type Pump implements Equipment & Metadata & Position {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  flow_rate: String
  power: String
  discharge_pressure: String

}

# Enums for Units
enum PressureUnit {
  PSI
  BAR
  PA
  MPA
}

enum TemperatureUnit {
  C
  F
  K
}

enum VolumeUnit {
  BARREL
  CUBIC_METER
  LITER
}

enum FlowRateUnit {
  M3_H
  BBL_DAY
  GPM
}

# type Query {
#   equipment(id: ID!): Equipment
#   allEquipment: [Equipment!]!
# }

# type Mutation {
#   updateEquipmentStatus(id: ID!, status: String!): Equipment
#   addSensorReading(id: ID!, reading: Float!): Sensor
# }

# type Subscription {
#   equipmentUpdated: Equipment
# }
