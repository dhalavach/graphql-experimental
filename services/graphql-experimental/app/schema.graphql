# GraphQL schema for Neo4j access and Canvas integration. V.1.0.0

# Enums for measurement units

enum PressureUnit {
  PSI # Pounds per square inch
  BAR # Bar. 1 bar = 100 000 PA
  PA # Pascal
  MPA #Megapascal
}

enum TemperatureUnit {
  C # Celsius
  F # Fahrenheit
  K # Kelvin
}

enum VolumeUnit {
  BARREL
  CUBIC_METER
  LITER
}

enum FlowRateUnit {
  M3_H # Cubic meters per hour
  BBL_DAY # Barrels per day
  GPM # Gallons per minute
}

enum EquipmentType {
  UNPROCESSED
  STORAGE_TANK
  SEPARATOR
  GAS_WELL
  COMPRESSOR
  GAS_PROCESSING_PLANT
  NGL_FRACTIONATION_UNIT
  SENSOR
  PUMP
}

# Enums for messages

enum MessageType {
  SENSOR_READING
  ALERT
  EQUIPMENT_CRUD_OPERATION
  EQUIPMENT_TEMPLATE
  EQUIPMENT_UPDATE
  EQUIPMENT_RELATIONS_UPDATE
  INCIDENT_REPORT
  MAINTENANCE_SCHEDULE
  WORK_ORDER
  PRODUCTION_REPORT
}

enum ReadingQualityIndicator {
  GOOD
  SUSPECT
  BAD
}

enum SeverityIndicator {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum EquipmentCrudOperationType {
  CREATE
  READ
  UPDATE
  DELETE
}

# Reusable types

# @query directive excludes the interface the autogeneration
# of API enpoints(types) by @neo4j/graphl library. Remove or replace if necessary

#2D position on Canvas
type PositionDTO @query(read: false, aggregate: false) {
  x: Float!
  y: Float!
}

type InputEntity @query(read: false, aggregate: false) {
  id: ID!
  name: String!
  description: String
}

type OutputEntity @query(read: false, aggregate: false) {
  id: ID!
  name: String!
  description: String
}

# Common interfaces for metadata, position, and flow relationships

interface Metadata @query(read: false, aggregate: false) {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
}

#this interface is not used for now
interface EntityRecognitionLinks @query(read: false, aggregate: false) {
  identical_to_entity: String
  similar_to_entity: String
  similarity_score: Float
}

interface Position @query(read: false, aggregate: false) {
  position: PositionDTO
}

interface HasInput @query(read: false, aggregate: false) {
  inputs: [InputEntity]
}

interface HasOutput @query(read: false, aggregate: false) {
  outputs: [OutputEntity]
}

# Interfaces for abstract types
interface Equipment implements Metadata & Position {
  id: ID!
  name: String!
  type: EquipmentType!
  webid: String
  parent: String
  description: String
  position: PositionDTO
}

interface Process implements Metadata & Position & HasInput & HasOutput {
  id: ID!
  name: String!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  inputs: [InputEntity]
  outputs: [OutputEntity]
}

interface Facility implements Equipment & Metadata & Position {
  id: ID!
  name: String!
  type: EquipmentType!
  webid: String
  parent: String
  description: String
  position: PositionDTO
}

interface MeasurementDevice implements Equipment & Metadata & Position {
  id: ID!
  name: String!
  type: EquipmentType!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  reading: Float
  measurement_unit: String
}

interface Message {
  message_id: String!
  message_type: MessageType!
  timestamp: String
}

# Types for specific classes with attributes
type StorageTank implements Facility & Equipment & Metadata & Position {
  id: ID!
  name: String!
  type: EquipmentType!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  capacity: Float
  capacity_measure_unit: VolumeUnit
  contents: String
  identical_to_entity: StorageTank @relationship(type: "IDENTICAL", direction: OUT)
}

type Separator implements Process & Metadata & Position & HasInput & HasOutput {
  id: ID!
  name: String!
  type: EquipmentType!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  inputs: [InputEntity]
  outputs: [OutputEntity]
  pressure: Float
  pressure_measure_unit: PressureUnit
  temperature: Float
  temperature_measure_unit: TemperatureUnit
  separation_efficiency: Float
  identical_to_entity: Separator @relationship(type: "IDENTICAL", direction: OUT)
}

type GasWell implements Equipment & Metadata & Position & HasOutput {
  id: ID!
  name: String!
  type: EquipmentType!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  outputs: [OutputEntity]
  pressure: Float
  pressure_measure_unit: PressureUnit
  flow_rate: Float
  flow_rate_measure_unit: FlowRateUnit
  depth: String
  identical_to_entity: GasWell @relationship(type: "IDENTICAL", direction: OUT)
}

type Compressor implements Equipment & Metadata & Position & HasInput & HasOutput {
  id: ID!
  name: String!
  type: EquipmentType!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  inlet_pressure: String
  inlet_pressure_measure_unit: PressureUnit
  outlet_pressure: String
  outlet_pressure_measure_unit: PressureUnit
  power_consumption: String
  inputs: [InputEntity]
  outputs: [OutputEntity]
  # identical_to_entity: Compressor @relationship(type: "IDENTICAL", direction: OUT)
}

type GasProcessingPlant implements Facility & Metadata & Position & Equipment & HasInput & HasOutput {
  id: ID!
  name: String!
  type: EquipmentType!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  throughput_capacity: String
  ngl_recovery_rate: Float
  inputs: [InputEntity]
  outputs: [OutputEntity]
  identical_to_entity: GasProcessingPlant @relationship(type: "IDENTICAL", direction: OUT)
}

type NGLFractionationUnit implements Process & Metadata & Position & HasInput & HasOutput {
  id: ID!
  name: String!
  type: EquipmentType!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  inputs: [InputEntity]
  outputs: [OutputEntity]
  feed_rate: String
  ethane_recovery_rate: Float
  propane_recovery_rate: Float
  reboiler_duty: String
  identical_to_entity: NGLFractionationUnit @relationship(type: "IDENTICAL", direction: OUT)
}

type Sensor implements MeasurementDevice & Equipment & Metadata & Position {
  id: ID!
  name: String!
  type: EquipmentType!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  sensor_type: String
  reading: Float
  measurement_unit: String
  accuracy: Float
  similar_to_entity: String
  similarity_score: Float
  identical_to_entity: Sensor @relationship(type: "IDENTICAL", direction: OUT)
}

type Pump implements Equipment & Metadata & Position {
  id: ID!
  name: String!
  type: EquipmentType!
  webid: String
  parent: String
  description: String
  position: PositionDTO
  flow_rate: Float
  flow_rate_measure_unit: FlowRateUnit
  power: String
  discharge_pressure: Float
  discharge_pressure_measure_unit: PressureUnit
  identical_to_entity: Pump @relationship(type: "IDENTICAL", direction: OUT)
}

# Message types
type SensorReading implements Message {
  message_id: String!
  message_type: MessageType!
  timestamp: String
  equipment_id: String!
  value: Float
  measurement_unit: String
  quality_indicator: ReadingQualityIndicator
}

type Alert implements Message {
  message_id: String!
  message_type: MessageType!
  timestamp: String
  equipment_id: String!
  alert_type: String
  severity: SeverityIndicator
}

type EquipmentCrudOperation implements Message {
  message_id: String!
  message_type: MessageType!
  timestamp: String
  operation_type: EquipmentCrudOperationType!
  equipment_id: String!
  user: String
  additional_data: String
}

type EquipmentTemplate implements Message {
  message_id: String!
  message_type: MessageType!
  timestamp: String
  equipment_id: String!
  manufacturer: String
  model: String
  template: String # this should be a data transfer object, but it is too complex for now
}

#update some property of existing equipment
type EquipmentUpdate implements Message {
  message_id: String!
  message_type: MessageType!
  timestamp: String
  equipment_id: String!
  update_type: String!
  updated_value: String!
  user: String
}

type EquipmentRelationsUpdate implements Message {
  message_id: String!
  message_type: MessageType!
  timestamp: String
  equipment_id: String!
  relationship_type: String!
  related_equipment_id: String!
  change_description: String
}

type IncidentReport implements Message {
  message_id: String!
  message_type: MessageType!
  timestamp: String
  incident_type: String!
  description: String!
  equipment_id: String
}

type MaintenanceSchedule implements Message {
  message_id: String!
  message_type: MessageType!
  timestamp: String
  equipment_id: String!
  maintenance_type: String!
  frequency: String
  next_due_date: String
}

type WorkOrder implements Message {
  message_id: String!
  message_type: MessageType!
  timestamp: String
  description: String!
  equipment_id: String!
  status: String
  scheduled_start: String
  scheduled_end: String
}

type ProductionReport implements Message {
  message_id: String!
  message_type: MessageType!
  timestamp: String
  production_date: String!
  total_output: String!
  equipment_id: String!
}
